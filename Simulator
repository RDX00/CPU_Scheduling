import tkinter as tk
from tkinter import messagebox
def fcfs(processes, burst_time):
    n = len(processes)
    waiting_time = [0] * n
    turnaround_time = [0] * n
    total_waiting_time = 0
    total_turnaround_time = 0

    for i in range(1, n):
        waiting_time[i] = burst_time[i-1] + waiting_time[i-1]

    for i in range(n):
        turnaround_time[i] = burst_time[i] + waiting_time[i]
        total_waiting_time += waiting_time[i]
        total_turnaround_time += turnaround_time[i]

    avg_waiting_time = total_waiting_time / n
    avg_turnaround_time = total_turnaround_time / n
    return waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time
def round_robin(processes, burst_time, quantum):
    n = len(processes)
    waiting_time = [0] * n
    turnaround_time = [0] * n
    total_waiting_time = 0
    total_turnaround_time = 0
    remaining_time = burst_time[:]
    time = 0
    while True:
        done = True
        for i in range(n):
            if remaining_time[i] > 0:
                done = False
                if remaining_time[i] > quantum:
                    time += quantum
                    remaining_time[i] -= quantum
                else:
                    time += remaining_time[i]
                    waiting_time[i] = time - burst_time[i]
                    remaining_time[i] = 0
        if done:
            break

    for i in range(n):
        turnaround_time[i] = burst_time[i] + waiting_time[i]
        total_waiting_time += waiting_time[i]
        total_turnaround_time += turnaround_time[i]

    avg_waiting_time = total_waiting_time / n
    avg_turnaround_time = total_turnaround_time / n
    return waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time
def sjf(processes, burst_time):
    n = len(processes)
    waiting_time = [0] * n
    turnaround_time = [0] * n
    total_waiting_time = 0
    total_turnaround_time = 0

    sorted_burst_time = sorted(zip(processes, burst_time), key=lambda x: x[1])
    processes_sorted, burst_time_sorted = zip(*sorted_burst_time)

    for i in range(1, n):
        waiting_time[i] = burst_time_sorted[i-1] + waiting_time[i-1]

    for i in range(n):
        turnaround_time[i] = burst_time_sorted[i] + waiting_time[i]
        total_waiting_time += waiting_time[i]
        total_turnaround_time += turnaround_time[i]

    avg_waiting_time = total_waiting_time / n
    avg_turnaround_time = total_turnaround_time / n
    return waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time
def priority_scheduling(processes, burst_time, priority):
    n = len(processes)
    waiting_time = [0] * n
    turnaround_time = [0] * n
    total_waiting_time = 0
    total_turnaround_time = 0

    sorted_processes = sorted(zip(processes, burst_time, priority), key=lambda x: x[2])
    processes_sorted, burst_time_sorted, priority_sorted = zip(*sorted_processes)

    for i in range(1, n):
        waiting_time[i] = burst_time_sorted[i-1] + waiting_time[i-1]

    for i in range(n):
        turnaround_time[i] = burst_time_sorted[i] + waiting_time[i]
        total_waiting_time += waiting_time[i]
        total_turnaround_time += turnaround_time[i]

    avg_waiting_time = total_waiting_time / n
    avg_turnaround_time = total_turnaround_time / n
    return waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time
class CPUSchedulerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("CPU Scheduling Simulator")

        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_columnconfigure(1, weight=2)
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_rowconfigure(1, weight=1)
        self.root.grid_rowconfigure(2, weight=1)
        self.root.grid_rowconfigure(3, weight=1)
        self.root.grid_rowconfigure(4, weight=1)
        self.root.grid_rowconfigure(5, weight=1)
        self.root.grid_rowconfigure(6, weight=1)
        self.root.grid_rowconfigure(7, weight=1)
        self.root.grid_rowconfigure(8, weight=4)

        self.num_processes_label = tk.Label(root, text="Number of Processes:")
        self.num_processes_label.grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.num_processes_entry = tk.Entry(root)
        self.num_processes_entry.grid(row=0, column=1, sticky="ew", padx=5, pady=5)

        self.burst_time_label = tk.Label(root, text="Burst Time (comma-separated):")
        self.burst_time_label.grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.burst_time_entry = tk.Entry(root)
        self.burst_time_entry.grid(row=1, column=1, sticky="ew", padx=5, pady=5)

        self.priority_label = tk.Label(root, text="Priority (comma-separated, for Priority Scheduling):")
        self.priority_label.grid(row=2, column=0, sticky="w", padx=5, pady=5)
        self.priority_entry = tk.Entry(root)
        self.priority_entry.grid(row=2, column=1, sticky="ew", padx=5, pady=5)

        self.quantum_label = tk.Label(root, text="Quantum Time (for Round Robin):")
        self.quantum_label.grid(row=3, column=0, sticky="w", padx=5, pady=5)
        self.quantum_entry = tk.Entry(root)
        self.quantum_entry.grid(row=3, column=1, sticky="ew", padx=5, pady=5)

        self.result_label = tk.Label(root, text="Result:")
        self.result_label.grid(row=4, column=0, columnspan=2, sticky="w", padx=5, pady=5)

        self.fcfs_button = tk.Button(root, text="FCFS Scheduling", command=self.fcfs_scheduling)
        self.fcfs_button.grid(row=5, column=0, sticky="ew", padx=5, pady=5)

        self.rr_button = tk.Button(root, text="Round Robin Scheduling", command=self.rr_scheduling)
        self.rr_button.grid(row=5, column=1, sticky="ew", padx=5, pady=5)

        self.sjf_button = tk.Button(root, text="SJF Scheduling", command=self.sjf_scheduling)
        self.sjf_button.grid(row=6, column=0, sticky="ew", padx=5, pady=5)

        self.priority_button = tk.Button(root, text="Priority Scheduling", command=self.priority_scheduling)
        self.priority_button.grid(row=6, column=1, sticky="ew", padx=5, pady=5)

        self.refresh_button = tk.Button(root, text="Refresh", command=self.refresh)
        self.refresh_button.grid(row=7, column=0, columnspan=2, sticky="ew", padx=5, pady=5)

        self.output_text = tk.Text(root, width=50, height=10)
        self.output_text.grid(row=8, column=0, columnspan=2, sticky="ew", padx=5, pady=5)

    def get_input_data(self):
        try:
            num_processes = int(self.num_processes_entry.get())
            burst_time = list(map(int, self.burst_time_entry.get().split(',')))
            priority = list(map(int, self.priority_entry.get().split(','))) if self.priority_entry.get() else []
            quantum = int(self.quantum_entry.get()) if self.quantum_entry.get() else None
            return num_processes, burst_time, priority, quantum
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter valid data!")
            return None, None, None, None

    def display_results(self, waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time):
        result = "Waiting Time: " + str(waiting_time) + "\n"
        result += "Turnaround Time: " + str(turnaround_time) + "\n"
        result += f"Average Waiting Time: {avg_waiting_time:.2f}\n"
        result += f"Average Turnaround Time: {avg_turnaround_time:.2f}"
        self.output_text.delete(1.0, tk.END)
        self.output_text.insert(tk.END, result)

    def fcfs_scheduling(self):
        num_processes, burst_time, priority, quantum = self.get_input_data()
        if num_processes is None:
            return
        waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time = fcfs(range(num_processes), burst_time)
        self.display_results(waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time)

    def rr_scheduling(self):
        num_processes, burst_time, priority, quantum = self.get_input_data()
        if num_processes is None or quantum is None:
            return
        waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time = round_robin(range(num_processes), burst_time, quantum)
        self.display_results(waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time)

    def sjf_scheduling(self):
        num_processes, burst_time, priority, quantum = self.get_input_data()
        if num_processes is None:
            return
        waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time = sjf(range(num_processes), burst_time)
        self.display_results(waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time)

    def priority_scheduling(self):
        num_processes, burst_time, priority, quantum = self.get_input_data()
        if num_processes is None or not priority:
            return
        waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time = priority_scheduling(range(num_processes), burst_time, priority)
        self.display_results(waiting_time, turnaround_time, avg_waiting_time, avg_turnaround_time)

    def refresh(self):
        self.num_processes_entry.delete(0, tk.END)
        self.burst_time_entry.delete(0, tk.END)
        self.priority_entry.delete(0, tk.END)
        self.quantum_entry.delete(0, tk.END)
        self.output_text.delete(1.0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = CPUSchedulerApp(root)
    root.mainloop()
